*** General
Model view controller 
MVC core is cross platform application
It has build in dependency Injection
It has middleware componentrs and can define custome middleware
*** Getting started with templates
Empty - It containts the bare min content to show hello word (starting from scratch)
MVC template - Model Viewes controler template 
Web Application - slim version from mvc for razor pages 
API - Restufll http servise
*** Project file
It creates files with extension .csproj
Program file (click on project) has self explanatory propertyes
</TargetFramework> - spresifies the target Framework for the application
</AspNetCoreHostingModel> // spresifies how the application is hosted (inProcces or OutofProcess)
InProcess hosts the app inside of the IIS worker process (w3wp.exe)
OutOfProcess hosting model forward web request toa backend ASP.NET core app running the Kestrel server
 <PackageReference - includes list of dependencies
SDK - software developer kit
*** Main method 
Initialy starts as console application
The main method configures ASP.Net Core and starts it and at that point it becomes ans ASP.NET Core web application
We have startup class which is used in the IWebHostBuilder CreateWebHostBuilder method to build the web application
CreateDefaultBuilder is setting up the web server, loading the host and application from various configuration sources and configuring logging
*** Inprocess hosting
*** OutOfProcess hosting
*** launchSettings.json
This file it is only required on our local developend machine (we dont need it for publishig)
For publishin we need use appsettings.json
Setting the applicationURl
Setting enviroment (developent, staging...)
lunch profiles (default iisexpress and project name)
*** appsettings.json
We acces this settings from Iconfiguration service
appsettings.json
appsettings.enviroments.json (appsettings.Developement.json, appsettings.stagingjson, appsettings.production.json)
user secrets
environment variables
comand line arguments
It has cascade overriding from that order above
appsettings.json stores configurations information as key value pair ( we can add key values that we need)
*** Middleware
It can handle Http request and responses
It is pipeline for some functionality 
May simply pass the Request to the next middleware
May do some logic and then pass the request
May reject the request
Middlewares are executed in the order they are added
app.run method is terminal middleware (does not call the next middleware)
To call the next middleware use app.use with 2 parameters (second parameter is func that points to the next middleware)
*** Static files 
To use static files we need couple of rules:
-All static files needs to be in wwwroot foled
-We need the exat path to that location where the file is
-We need to register another middleware for use of static files
*** Use developer exception page
Declare as early as possible
Contains stack trace, Query string, cookies and Http headers
we can customize using developerExceptionPageOptions object
*** Enviroment variable
Development enviroment - developer tools, developer exception , full scripts involved
Staging Enviroment - as close as production, user friendly exceptions, minimazed scripts
Production Enviroment - max security, minimaze scripts
Default enviroment is Production
ASPNETCORE_ENVIRONMENT is where we set the environment.
On development machine we set it in launchsettings.json
On staging or production server we set in the operating system
Also supported custom environment
*** Setup mvc in asp net core
We need to add service.AddMvc() or AddMvcCore()
service.AddMvcCore only uses the core MVC services 
service.AddMvc uses all of the services. Internaly it calls service.addMvcCore method
We need to add Middleware app.useMvc
There is a convention naming the controlers (add Controller after the name of the controler)
Controler class should inherit from Controller and name space AspNetCore.Mvc
*** Models
models = data + manage the data
raw data that we need in classes
Mostly properties that we need and some methods that are conected to that class
We also need to implement repository pattern and dependency injection to provide 
loose coupling and give more security
With models goes logic to manage the data. We can separate this clasess in new folder
*** Dependency injection
Creating an isntance of an object. Because there is no implementation in interface
we need to make an instance of the class that is inheriting the interface.
We also need write the service that we want to use in startup class.
For that we can use 3 methods to register our dependency injection
service.AddSingleton - at first requested, single instance is created and used
service.Scope - once per request within the scope, it creates one instance per each 
		Http request and uses same instance in that other calls within that same web request
service.AddTransient - each time it is requested, new instance is created
*** Controlers
Request that arrives are handled by controler
It has Action method that handles and process the http request
Needs to inherit form class Controller
Builds the model and passes it to the View
*** Views
All files are in Views folder, then folder with the name of the controler 
then file with same name as the action in that controler
Presenting the model data provided by the controler
Contains logic to display model data
We use razorview file so we can use html elements and c# code (razor syntax) 
we can use overloads in the actions to create custome routing for views
we can pass data to view form a controler
-ViewData
-ViewBag
-Strongly Typed View
We can use them in the same view to pass parametars
*** ViewData 
Provide loosely typed view (no intelisense, type of data is nown at a runtime, dynamicly resolved at runtime)
Declared and assign in the action method in controled  ViewData["name_of_property"] = something
If element is not a string, we need to cast it explicitly to the type that we want
*** ViewBag
Its like a wraper 
Same as ViewData but no need of explicitly cast types
*** Strongly Typed View
include at the top the model directive @model namspaceOfTheModel
Provide intelicense
Compile time checking erros 
*** ViewModel
We create View Model when a model objec does not contain all the data a view needs
is a class that contains all data that our action needs to pass to the view
can be anywhere but to keep everything organized we put them into separate folder
They are called DTO data transfer objecs
To put a list into a table we need to use foreach or for cycle and use razor syntax
*** View Layot 
The basic general common elements that we have in all of the Views (header, menu, footer)
Provides consisten looking behaviour for all the views of our application 
Easy to maintain
Application can have multiple layout views
it can have section that it is mandotory or optional
use @RenderSection in layot to specify where you want to put the section
We can also make a check and go to the view and declare that we are going to use section there
In layot
 @if (IsSectionDefined("Scripts"))
    {
        @RenderSection("Scripts", required: true)
    }
In view
@section Scripts {
    <script src="~/js/CustomScript.js"></script>
}

***ViewStartFile and ViewImportsFile
Both are hierarchial (cascade overwrite). The one that is deeper in folder is the one to listen 
We can use ViewStartFile to include code that is common to all views
We can use ViewImports to include the common namespaces with @usin name_of_namespace
*** Routing 
-Conventional Routing 
-Attribute Routing
We can mix conventional Routing and atribute Routing
*Conventional routing 
With routing we are telling the app what controler should be 
targeted by the request and which action to invoke
We need to include in startup the way of routing we want.
We can chose the app.UseMvcWithdefaultRout() or we can configure app.UseMvc();
we can set default route with .MapRoute() method
*Atribute routing
use atributes above a controler or above an individual action
[Route("path")]
We can put any name in the path that we want to write in the browser (override the default routing)
Atribute above controler is combined with the atribute on the individual action
atribute can support tokens [controller] and [action] as a name that points to the controller or the action
*** libman.json file
we use this file to add bootstrap, jquery or other scripts
we can acess directrly from the file or we can install them from the clien-side library
*** Tag helpers
We import tag helpers with this sytax: @addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
we put the into ViewImports file
we use them to automaticly generate html tags 
html helpers are diferent than tag helpers
Image tag helper - it adds unique string to img to check the new version on server (in combination with cash)
Environment tag helper - to include min version for stage or prodoction. If failf to load fall back to local version
Form tag helper - helps with form and provides modelbinding
*** Model binding
cascade binding 
-Query strings
-Route values
-Form Values
It maps our values form form or from query string to our model object in backend
we need to use tag helpers in the view to achieve that
*** Model validation
We put attributes above the wanted property
They come form the namespace System.ComponentModel.DataAnnotations
we need to ModelState to check if the model is valid (we do that in controller)
we can use atributes properties [AtributeName(propertyName = )]
use tag helper to add spans to show errors in view
Validation summary tag helper - to see all validations
it is done in 3 steps
1.use atributes 2.Check validation in controller 3.Tag helpers in view
*** Entity framework core
Object relation mapper
It enable developers to work with database using business object
it supports reading and writing to database 
we need to create special class that uses DatabaseContext 
with DBContextClasses EF communicating with the base
It has codeFirst approach and Databese first approach
we need Database provider (nugetPackage) for the type of database
Microsoft.EntityFrameworkCore.SqlServer
Microsoft.EntityFrameworkCore.Relational
Microsoft.EntityFrameworkCore
*** DbContext
It allows us to interact with the database
The class that we use for that needs to derive from DbContext
it needs an instance of dbcontext options class (connection strign, appsettings...)
we are making instance trough the contructor and we call the base contructur
we create corresponding dbset property
*** Using SQl server
we need to add servise for our dbcontext. Than we need to use options to select what kind of
database we are using. Then to configure the connection string using appsettings
it is done like this  services.AddDbContextPool<NameForDbContextClass>(
                options => options.UseSqlServer(_injectedConfiguration.GetConnectionString("Property_name")));
*** Repository pattern
Is Abstraction of data access layer. It hides the details of how the data is saved or retrieved
Provides loosely coupled components
It has all the crud operation
It is build with 2 components: IRepositoryName and RepositoryName
Use dependecy injection to provide an instance 
*** Migration 
keeps the database schema and application model classes synchronized
First we need to create migration then we need to execute it
Add-migration than update-Database
we can use Package Manager Console in Visual Studio (it is a crossplatform console)
The migration creates/updates/deletes tables in sql just like our models 
with update-database we can specify migration name. If not, the latest migration is executede
With everychange in our code that affects the database, we need to use add migration and then update migration
*** Seed data
to seed some data in freshly new table, we need to 
override method OnModelCreating in our class that inherits from DbContext
than we need to pass parametars to method modelBuilder._____().HasData
if the seed data is large, we can create extention method and put the seed data there to cepp the code clean
*** Sync models and schema
it is not recomended to make change to the database directly. We need to use migration with every change
To keep up with migration, VS has file ModelSnapshot in migration
ModelSnapshot is up to date with our migrations
We can add or remove migration according to the ModelSnapshot
When we remove migration, our models are not changed
Allready updated migration can not be removed. First needs to be reverted
we can revert the database with comand update-database and specify the name
of older migration that we want to revert
we have histoy of migration in our database
*** File upload imput
Coplex file can not be stored in the database 
We can store the path or name of the file as string
We can use IFromFile interface if we want to save complex files
in the form we need to specify encription type enctype="multipart/form-data"
If we use tag helpers, visul studio will bind the type of propery (IFromFile) that we habe in the ViewModel
We need to use ViewModel in the controler so we have the right properties 
We need to inject IHostingEnvironment in the controler so we can acess the file
There is a need to specify the folder that we need to save files (using system.io) 
and we need to have unique file name (to not ovverride an existing files)
also we need to use IFromFile class to use the properies CopyTo(new Filestream())
we need to properly dispose of the filestream
Then transfer the information from ViewMode to the Model
in the view change the path to the ones that are saved in the Model (database)
we need to use tag helper sp-append-version="true"
*** Multiply files
Include "multiple" in the imput wher we are chosing files
change the property in modelView to list<IFromFile>
make change in the controler also
*** Error handling
We handle erros with middleware
app.UseExceptionHandler()
we need to create controler and view for the error page
*** Logging into visual studio console
inject an instance of Ilogger
Specify the thype of the controller into witch Ilogger is injected as the generic argument
use the instace methods to log messages
*** Logging to file
Download NuGet package Nlog (one of the many loggers) NLog.Web.AspNetCore
we need to create configuration file for nlog and configure it
This config file needs to be copied to output directory (right click on file > properties > copy if newer
there are different levels of errors
we can configure level of logging in appsettings.json
*** IdentiyDbContext 
our dbcontext class that we use for database needs to inherit form IdentiyDbContext 
IdentiyDbContext  has a lot of predefined properties that we can use 
In startup we neet to add this service services.AddIdentity<>() and in the brackets we need to specify what we are going to use
we need to chain to that addEntityFrameworkStores<nameOf_DbContextClass>
we need to add authetication middleware    app.UseAuthentication();
Create migration and update database
*** UserManager and SignInManager









